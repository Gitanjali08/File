### Analytics Assignment 2: Building Statistical Models with USA_Housing Dataset

#### Overview

This assignment involves building several statistical models using the USA_Housing dataset. We will use Linear Regression, Robust Regression, Ridge Regression, LASSO Regression, Elastic Net, and Polynomial Regression to analyze the data and compare their performance.

### Step-by-Step Guide

#### Step 1: Load the Dataset

1. **Load Data:**
   - Ensure you have the USA_Housing dataset in a CSV file (`USA_Housing.csv`).

#### Step 2: Preprocessing the Data

1. **Import Libraries:**
   ```python
   import pandas as pd
   import numpy as np
   import matplotlib.pyplot as plt
   import seaborn as sns
   from sklearn.model_selection import train_test_split
   from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
   from sklearn.preprocessing import PolynomialFeatures
   from sklearn.metrics import mean_squared_error, r2_score
   import statsmodels.api as sm
   ```

2. **Load the Dataset:**
   ```python
   data = pd.read_csv('USA_Housing.csv')
   data.head()
   ```

3. **Check for Missing Values:**
   ```python
   data.isnull().sum()
   ```

4. **Split the Data:**
   ```python
   X = data[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms', 
             'Avg. Area Number of Bedrooms', 'Area Population']]
   y = data['Price']

   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
   ```

#### Step 3: Model Building

##### Linear Regression

1. **Train the Model:**
   ```python
   lr = LinearRegression()
   lr.fit(X_train, y_train)
   ```

2. **Evaluate the Model:**
   ```python
   y_pred = lr.predict(X_test)
   print(f"Linear Regression RMSE: {mean_squared_error(y_test, y_pred, squared=False)}")
   print(f"Linear Regression R2: {r2_score(y_test, y_pred)}")
   ```

##### Robust Regression

1. **Train the Model:**
   ```python
   X_train_robust = sm.add_constant(X_train)
   robust_model = sm.RLM(y_train, X_train_robust, M=sm.robust.norms.HuberT()).fit()
   ```

2. **Evaluate the Model:**
   ```python
   X_test_robust = sm.add_constant(X_test)
   y_pred_robust = robust_model.predict(X_test_robust)
   print(f"Robust Regression RMSE: {mean_squared_error(y_test, y_pred_robust, squared=False)}")
   print(f"Robust Regression R2: {r2_score(y_test, y_pred_robust)}")
   ```

##### Ridge Regression

1. **Train the Model:**
   ```python
   ridge = Ridge(alpha=1.0)
   ridge.fit(X_train, y_train)
   ```

2. **Evaluate the Model:**
   ```python
   y_pred_ridge = ridge.predict(X_test)
   print(f"Ridge Regression RMSE: {mean_squared_error(y_test, y_pred_ridge, squared=False)}")
   print(f"Ridge Regression R2: {r2_score(y_test, y_pred_ridge)}")
   ```

##### LASSO Regression

1. **Train the Model:**
   ```python
   lasso = Lasso(alpha=0.1)
   lasso.fit(X_train, y_train)
   ```

2. **Evaluate the Model:**
   ```python
   y_pred_lasso = lasso.predict(X_test)
   print(f"LASSO Regression RMSE: {mean_squared_error(y_test, y_pred_lasso, squared=False)}")
   print(f"LASSO Regression R2: {r2_score(y_test, y_pred_lasso)}")
   ```

##### Elastic Net

1. **Train the Model:**
   ```python
   elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5)
   elastic_net.fit(X_train, y_train)
   ```

2. **Evaluate the Model:**
   ```python
   y_pred_enet = elastic_net.predict(X_test)
   print(f"Elastic Net RMSE: {mean_squared_error(y_test, y_pred_enet, squared=False)}")
   print(f"Elastic Net R2: {r2_score(y_test, y_pred_enet)}")
   ```

##### Polynomial Regression

1. **Transform Features:**
   ```python
   poly = PolynomialFeatures(degree=2)
   X_train_poly = poly.fit_transform(X_train)
   X_test_poly = poly.transform(X_test)
   ```

2. **Train the Model:**
   ```python
   poly_reg = LinearRegression()
   poly_reg.fit(X_train_poly, y_train)
   ```

3. **Evaluate the Model:**
   ```python
   y_pred_poly = poly_reg.predict(X_test_poly)
   print(f"Polynomial Regression RMSE: {mean_squared_error(y_test, y_pred_poly, squared=False)}")
   print(f"Polynomial Regression R2: {r2_score(y_test, y_pred_poly)}")
   ```

#### Step 4: Summary of Results

1. **Compile Results:**
   ```python
   results = {
       "Model": ["Linear Regression", "Robust Regression", "Ridge Regression", 
                 "LASSO Regression", "Elastic Net", "Polynomial Regression"],
       "RMSE": [mean_squared_error(y_test, y_pred, squared=False),
                mean_squared_error(y_test, y_pred_robust, squared=False),
                mean_squared_error(y_test, y_pred_ridge, squared=False),
                mean_squared_error(y_test, y_pred_lasso, squared=False),
                mean_squared_error(y_test, y_pred_enet, squared=False),
                mean_squared_error(y_test, y_pred_poly, squared=False)],
       "R2": [r2_score(y_test, y_pred),
              r2_score(y_test, y_pred_robust),
              r2_score(y_test, y_pred_ridge),
              r2_score(y_test, y_pred_lasso),
              r2_score(y_test, y_pred_enet),
              r2_score(y_test, y_pred_poly)]
   }

   results_df = pd.DataFrame(results)
   print(results_df)
   ```

#### Visualization in Power BI

1. **Export Results:**
   ```python
   results_df.to_csv('model_results.csv', index=False)
   ```

2. **Load Results into Power BI:**
   - Open Power BI Desktop.
   - Click on "Get Data" -> "Text/CSV" and load `model_results.csv`.

3. **Create Visualizations:**
   - Create bar charts to compare RMSE and R2 scores across different models.
   - Use scatter plots to visualize actual vs. predicted values for each model.

### Conclusion

By following these steps, you will have built multiple regression models using the USA_Housing dataset and evaluated their performance. You can then present your findings in Power BI through visualizations that compare the models' performance metrics.
